/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        if(root==nullptr){return root;}
        reverseOddLevelsHelp(root->left, root->right, 2);
        return root;
    }
    void reverseOddLevelsHelp(TreeNode* leftTree, TreeNode* rightTree,int counter){
        if(leftTree==nullptr){return;}
        else if(leftTree->left==nullptr){
            if((counter%2==0)){
                int temp = leftTree->val;
                leftTree->val=rightTree->val;
                rightTree->val=temp;
            }
            return;
        }
        //reverseOddLevelsHelp(leftTree->left, rightTree->left,counter+1);
        reverseOddLevelsHelp(leftTree->left, rightTree->right,counter+1);
        reverseOddLevelsHelp(leftTree->right, rightTree->left,counter+1);
        //reverseOddLevelsHelp(leftTree->right, rightTree->right,counter+1);
        int temp;
        if((counter%2==0)&&leftTree->right!=nullptr){
            temp = leftTree->val;
            leftTree->val=rightTree->val;
            rightTree->val=temp;
        }

        return;
    }
};

